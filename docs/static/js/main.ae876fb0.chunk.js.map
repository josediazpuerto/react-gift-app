{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OAEI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACxCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAETC,EAFS,iDAEuCC,UAAWH,GAFlD,+DAGII,MAAMF,GAHV,cAGTG,EAHS,gBAIMA,EAAKC,OAJX,uBAIRC,EAJQ,EAIRA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV3B,kBAcRM,GAdQ,4CAAH,sDCAPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIjC,OACI,sBAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAIA,QCLHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,ECLwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OApBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAO,SAAAC,GAEAH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK3B,CAAEpB,IASGqB,EDvB2BK,CAAc1B,GAAlCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAOtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDhB,EAApD,OACEoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SAIQH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEpBxBgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,SAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADNA,YCXlB6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OAEL,cAAE,EAAF,IAEFC,SAASC,eAAe,SAQ1BX,M","file":"static/js/main.ae876fb0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2) {\r\n            setCategories( categ => [inputValue, ...categ]);\r\n            setInputValue('');\r\n        };\r\n\r\n    };\r\n\r\n    return (\r\n        \r\n        <form onSubmit= { handleSubmit } >\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange= {handleInputChange}\r\n            />\r\n        </form>\r\n        \r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};","\r\n\r\nexport const getGifs = async ( category )=>{\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=QTcJQVvw9WR4WI6InphlLbUI2gMzOXwt`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n        \r\n    };\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n\r\n    //console.log(title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n\r\n            <img src={ url } alt={ title } />\r\n            <p>{title}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n/* import { getGifs } from '../helpers/GetGifs';*/\r\nimport { GifGridItem } from './GifGridItem'; \r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //const [images, setImages] = useState([]);\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n\r\n\r\n    //getGifs();\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n            \r\n                \r\n                {\r\n                    images.map( (img) => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/GetGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n   \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect(()=> {\r\n        getGifs(category)\r\n            .then ( imgs => {\r\n                \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                \r\n            });\r\n            \r\n    },[ category ]); \r\n\r\n  /*   setTimeout(() => {\r\n        setState({\r\n            data: [1,2,3,4,5],\r\n            loading: false\r\n        })\r\n    }, 3000); */\r\n\r\n    return state;\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['papa']);\r\n\r\n    /* const handleAdd = () => {\r\n        setCategories([...categories, 'mazorca']);\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2> GifExpertApp </h2>\r\n            <AddCategory setCategories = {setCategories}/>\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category= {category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './components/GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  \n    < GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}